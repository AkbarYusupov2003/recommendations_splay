# Generated by Django 4.2.8 on 2023-12-22 10:51

import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import stdimage.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AllowedCountry',
            fields=[
                ('country_code', models.CharField(choices=[('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('TP', 'East Timor'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji Islands'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('CI', 'Ivory Coast'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'North Macedonia'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania'), ('TH', 'Thailand'), ('CD', 'The Democratic Republic of Congo'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('ALL', 'All Countries')], max_length=3, primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'Страна для разрешения',
                'verbose_name_plural': 'Страны для разрешения',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_en', models.CharField(max_length=70, verbose_name='Название на [Английский]')),
                ('name_uz', models.CharField(max_length=70, verbose_name='Название на [Узбекский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('icon', models.ImageField(help_text='Поддерживается размер icon 90x90 px', null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='', verbose_name='Картинка icon')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'db_table': 'content_category',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Русский]')),
                ('slogan_ru', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Русский]')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('is_ru', models.BooleanField(default=False, verbose_name='доступен на языке [Русский]')),
                ('title_en', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Английский]')),
                ('slogan_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Английский]')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Описание на [Английский]')),
                ('is_en', models.BooleanField(default=False, verbose_name='доступен на языке [Английский]')),
                ('title_uz', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Узбекский]')),
                ('slogan_uz', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Узбекский]')),
                ('description_uz', models.TextField(blank=True, null=True, verbose_name='Описание на [Узбекский]')),
                ('is_uz', models.BooleanField(default=False, verbose_name='доступен на языке [Узбекский]')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('year', models.PositiveSmallIntegerField(default=2022, verbose_name='Дата выхода')),
                ('age_restrictions', models.PositiveSmallIntegerField(choices=[(0, '0+'), (6, '6+'), (12, '12+'), (16, '16+'), (18, '18+')], default='0+', verbose_name='Возрастные ограничения')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('logo_image_square', stdimage.models.StdImageField(default='static/placeholders/logo_image_square.png', force_min_size=False, help_text='Рекомендуемое соотношение сторон 1x1<br>Минимальный размер 600px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, 600)}, verbose_name='Лого медиа квадрат')),
                ('logo_image_rectangle', stdimage.models.StdImageField(default='static/placeholders/logo_image_rectangle.png', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 600px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, -1)}, verbose_name='Лого медиа прямоуг')),
                ('poster_v', stdimage.models.StdImageField(default='static/placeholders/poster_v.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 4x7<br>Минимальный размер 240,360px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (240, 360)}, verbose_name='Постер вертикальный')),
                ('poster_h', stdimage.models.StdImageField(default='static/placeholders/poster_h.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 336x189px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'promo': (600, 300), 'resized': (336, 189)}, verbose_name='Постер горизонтальный')),
                ('bg_image', stdimage.models.StdImageField(default='static/placeholders/bg_image.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 1920px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, 600)}, verbose_name='Фоновая картинка')),
                ('rating', models.FloatField(default=10, verbose_name='Рэйтинг')),
                ('rating_count', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Количество оценок')),
                ('is_new', models.BooleanField(default=False, verbose_name='Премьера')),
                ('is_soon', models.BooleanField(default=False, verbose_name='Скоро...')),
                ('is_free', models.BooleanField(default=False, verbose_name='Бесплатно')),
                ('is_russian', models.BooleanField(default=False, verbose_name='Русский контент')),
                ('is_4k', models.BooleanField(default=False)),
                ('is_full_hd', models.BooleanField(default=False)),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Длительность')),
                ('draft', models.BooleanField(default=True, verbose_name='Черновик')),
                ('is_serial', models.BooleanField(choices=[(True, 'Да, это Сериал'), (False, 'Нет, это Фильм')], verbose_name='Это сериал? ')),
                ('allowed_countries', models.ManyToManyField(blank=True, to='app.allowedcountry', verbose_name='Разрешенные страны')),
            ],
            options={
                'verbose_name': 'Контент',
                'verbose_name_plural': '!Контент 0 Full',
                'db_table': 'content_content',
            },
        ),
        migrations.CreateModel(
            name='ContentSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=60, verbose_name='Название на [Русский]')),
                ('description_ru', models.CharField(max_length=500, verbose_name='Описание на [Русский]')),
                ('description_list_ru', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Русский]')),
                ('title_en', models.CharField(max_length=60, verbose_name='Название на [Английский]')),
                ('description_en', models.CharField(max_length=500, verbose_name='Описание на [Английский]')),
                ('description_list_en', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Английский]')),
                ('title_uz', models.CharField(max_length=60, verbose_name='Название на [Узбекский]')),
                ('description_uz', models.CharField(max_length=500, verbose_name='Описание на [Узбекский]')),
                ('description_list_uz', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Узбекский]')),
                ('limit_sessions', models.PositiveSmallIntegerField(default=3, verbose_name='Лимит сессий')),
                ('price', models.PositiveIntegerField(verbose_name='Цена подписки в месяц в тийинах')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Icon')),
                ('archive', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
                'db_table': 'users_subscription',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_en', models.CharField(max_length=100, verbose_name='Имя на [Английский]')),
                ('name_uz', models.CharField(max_length=100, verbose_name='Имя на [Узбекский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
                'db_table': 'content_country',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='CrowdAudio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=550, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Все Аудио',
                'verbose_name_plural': 'Все Аудио',
                'db_table': 'content_crowdaudio',
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='CrowdVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Название')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Длительность')),
                ('is_mark_for_deletion', models.BooleanField(default=False)),
                ('codec_4k', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 4k')),
                ('codec_2k', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 2k')),
                ('codec_1080p', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 1080p')),
                ('codec_720p', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 720p')),
                ('codec_480p', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 480p')),
                ('codec_360p', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 360p')),
                ('codec_240p', models.CharField(blank=True, max_length=60, null=True, verbose_name='Кодек 240p')),
            ],
            options={
                'verbose_name': 'Все Видео',
                'verbose_name_plural': 'Все Видео',
                'db_table': 'content_crowdvideo',
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_en', models.CharField(max_length=70, verbose_name='Название на [Английский]')),
                ('name_uz', models.CharField(max_length=70, verbose_name='Название на [Узбекский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('picture', stdimage.models.StdImageField(force_min_size=False, help_text='Рекомендуемый размер 1x1', max_length=250, null=True, upload_to='genre_pictures/', variations={'large': (1080, 1080), 'medium': (768, 768), 'small': (200, 200), 'thumb': (75, 75)}, verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
                'db_table': 'content_genre',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_en', models.CharField(max_length=100, verbose_name='Имя на [Английский]')),
                ('name_uz', models.CharField(max_length=100, verbose_name='Имя на [Узбекский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('profile_pic', stdimage.models.StdImageField(blank=True, force_min_size=False, help_text='Соотношение сторон фото 1х1', null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'large': (1080, 1080), 'medium': (768, 768), 'resized': (600, 600), 'small': (200, 200), 'thumb': (75, 75)}, verbose_name='Фото')),
                ('is_actor', models.BooleanField(default=True, verbose_name='Актер?')),
                ('is_scenario', models.BooleanField(default=True, verbose_name='Сценарист?')),
                ('is_producer', models.BooleanField(default=True, verbose_name='Продюсер?')),
                ('is_director', models.BooleanField(default=True, verbose_name='Режиссер?')),
            ],
            options={
                'verbose_name': 'Участник',
                'verbose_name_plural': 'Участники',
                'db_table': 'content_person',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Спонсор',
                'verbose_name_plural': 'Спонсоры',
                'db_table': 'content_sponsor',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='ContentSponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_sponsors', to='app.content')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.sponsor')),
            ],
            options={
                'db_table': 'content_content_sponsors',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ContentGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_genres', to='app.content')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.genre')),
            ],
            options={
                'db_table': 'content_content_genres',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ContentCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_countries', to='app.content')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.country')),
            ],
            options={
                'db_table': 'content_content_country',
                'ordering': ('ordering',),
            },
        ),
        migrations.AddField(
            model_name='content',
            name='allowed_subscriptions',
            field=models.ManyToManyField(to='app.contentsubscription', verbose_name='Разрешенные подписки'),
        ),
        migrations.AddField(
            model_name='content',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contents', to='app.category'),
        ),
        migrations.AddField(
            model_name='content',
            name='country',
            field=models.ManyToManyField(blank=True, related_name='country', through='app.ContentCountry', to='app.country', verbose_name='Страна'),
        ),
        migrations.AddField(
            model_name='content',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='genres', through='app.ContentGenre', to='app.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='content',
            name='sponsors',
            field=models.ManyToManyField(blank=True, related_name='sponsors', through='app.ContentSponsor', to='app.sponsor', verbose_name='Спонсоры'),
        ),
        migrations.AddField(
            model_name='category',
            name='countries',
            field=models.ManyToManyField(blank=True, related_name='cat_countries', to='app.country', verbose_name='Страны'),
        ),
        migrations.AddField(
            model_name='category',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='cat_genres', to='app.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='category',
            name='sponsors',
            field=models.ManyToManyField(blank=True, related_name='cat_sponsors', to='app.sponsor', verbose_name='Спонсоры'),
        ),
    ]
